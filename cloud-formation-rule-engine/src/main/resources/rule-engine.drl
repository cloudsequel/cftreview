package KieRule;

import com.ruleengine.model.*;
import java.util.List;

global List<String> globalVar;

rule "Bucket Policy Type"
when
s3BucketPolicy: ScriptPolicy(type!="AWS::S3::BucketPolicy");
then
globalVar.add("Invalid bucket policy type name");
end;


rule "Bucket Name Char Validation"
when
s3BucketPolicy: ScriptPolicy((properties.bucket.getRef()!=""||
properties.bucket.getRef()!=null) &&
properties.bucket.getRef() not matches "^([a-z0-9\\-\\.]+)");
then
globalVar.add("Bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-)");
end;


rule "Bucket Policy Document Statement"
when
s3BucketPolicy: ScriptPolicy(properties.policyDocument.getStatement()==null||
properties.policyDocument.getStatement()==""||
properties.policyDocument.getStatement().empty == true);
then
globalVar.add("Statement is empty/null");
end;


rule "Bucket Policy Document Action"
when
s3BucketPolicy : ScriptPolicy(properties.policyDocument.getStatement().get(0).getActionn()==null||
properties.policyDocument.getStatement().get(0).getActionn().size()<1||
properties.policyDocument.getStatement().get(0).getActionn() contains "")
then
globalVar.add("Action is empty/null");
end;


rule "Bucket Policy Document Action for *"
when
s3BucketPolicy : ScriptPolicy($listofactions :properties.policyDocument.getStatement().get(0).getActionn())
value : String() from $listofactions
Boolean(booleanValue == true) from value contains "*"
then
globalVar.add("Action should not have \"*\"");
end;


rule "Bucket Policy Document Effect"
when
s3BucketPolicy : ScriptPolicy(properties.policyDocument.getStatement().get(0).getEffect()==null||
properties.policyDocument.getStatement().get(0).getEffect()=="")
then
globalVar.add("Effect is empty/null");
end;


rule "Bucket Policy Document Effect for *"
when
s3BucketPolicy : ScriptPolicy(properties.policyDocument.getStatement().get(0).getEffect().contains("*"))
then
globalVar.add("Effect should not have \"*\"");
end;


rule "Bucket Policy Document Effect should be allow or deny"
when
s3BucketPolicy : ScriptPolicy(!properties.policyDocument.getStatement().get(0).getEffect().equals("Allow") &&
!properties.policyDocument.getStatement().get(0).getEffect().equals("Deny"))
then
globalVar.add("Effect should be Allow or Deny only");
end;


rule "Bucket Policy Document Pricipal"
when
s3BucketPolicy : ScriptPolicy(properties.policyDocument.getStatement().get(0).getPrincipal()==null||
properties.policyDocument.getStatement().get(0).getPrincipal()=="")
then
globalVar.add("Principal is empty/null");
end;


rule "Bucket Policy Document Pricipal for *"
when
s3BucketPolicy : ScriptPolicy(properties.policyDocument.getStatement().get(0).getPrincipal().contains("*"))
then
globalVar.add("Principal should not have \"*\"");
end;


rule "Bucket Policy Document AWS Referer is null/empty"
when
s3BucketPolicy:ScriptPolicy(properties.policyDocument.getStatement().get(0).getCondition().getStringLike()!=null &&
properties.policyDocument.getStatement().get(0).getCondition().getStringLike().getAwsReferer() contains "")
then
globalVar.add("AWS Referer url is null/empty");
end;


rule "Bucket Policy Document AWS Referer having *"
when
s3BucketPolicy:ScriptPolicy(properties.policyDocument.getStatement().get(0).getCondition().getStringLike()!=null &&
properties.policyDocument.getStatement().get(0).getCondition().getStringLike().getAwsReferer() contains "*")
then
globalVar.add("AWS Referer should not have \"*\"");
end;


rule "Bucket Policy Document AWS SourceVpc is null/empty"
when
s3BucketPolicy:ScriptPolicy(properties.policyDocument.getStatement().get(0).getCondition().getStringEquals()!=null &&
(properties.policyDocument.getStatement().get(0).getCondition().getStringEquals().getAwsSourceVpc() == "" ||
properties.policyDocument.getStatement().get(0).getCondition().getStringEquals().getAwsSourceVpc() == null))
then
globalVar.add("SourceVpc url null/empty");
end;


rule "Bucket Policy Document AWS SourceVpc contains *"
when
s3BucketPolicy:ScriptPolicy(properties.policyDocument.getStatement().get(0).getCondition().getStringEquals()!=null &&
properties.policyDocument.getStatement().get(0).getCondition().getStringEquals().getAwsSourceVpc()contains("*"))
then
globalVar.add("SourceVpc should not have \"*\"");
end;